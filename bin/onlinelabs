#!/usr/bin/env node

var program = require('commander'),
    _ = require('lodash'),
    fs = require('fs'),
    moment = require('moment'),
    filesize = require('filesize'),
    Api = require('onlinelabs'),
    Table = require('cli-table'),
    version = JSON.parse(fs.readFileSync(__dirname + "/../package.json", "utf-8")).version;


var panic = function(msg) {
  console.error(msg);
  process.exit(-1);
};


var notImplementedAction = function() {
  console.error("onlinelabs: Not implemented");
};


var truncateRow = function(row, limits) {
  for (idx in row) {
    if (limits[idx] != -1) {
      row[idx] = row[idx].toString().substring(0, limits[idx]);
    }
  }
  return row;
};


var newTable = function(options) {
  options = options || {};
  options.chars = options.chars || {
    'top': '', 'top-mid': '', 'top-left': '', 'top-right': '',
    'bottom': '', 'bottom-mid': '', 'bottom-left': '', 'bottom-right': '',
    'left': '', 'left-mid': '', 'mid': '', 'mid-mid': '',
    'right': '', 'right-mid': '', 'middle': ' '
  };
  options.style = options.style || {
    // 'padding-left': 0, 'padding-right': 0
  };
  return new Table(options);
};


var wordify = function(str) {
  return str
    .replace(/[^a-zA-Z0-9-]/g, '_')
    .replace(/__+/g, '_')
    .replace(/^_/, '')
    .replace(/_$/, '');
};


var newApi = function(options) {
  options = options || {};
  var config = {};
  // FIXME: override config from options
  return new Api(options);
};


var collect = function(val, memo) {
  memo.push(val);
  return memo;
};


program
  .version(version)
  .option('--api-endpoint <url>', 'set the API endpoint')
  .option('--organization <uuid>', 'set the organization')
  .option('--token <token>', 'set the API token')
  .option('-D, --debug', 'enable debug mode');


program
  .command('attach <server>')
  .description('attach (serial console) to a running server')
  .action(notImplementedAction);


program
  .command('build <path>')
  .description('build an image from a file')
  .action(notImplementedAction);


program
  .command('commit <server>')
  .description('create a new image from a server\'s changes')
  .action(notImplementedAction);


program
  .command('cp <server:path> <path>')
  .description('copy files/folders from a server\'s filesystem to the host path')
  .action(notImplementedAction);


program
  .command('create <image>')
  .description('create a new server but do not start it')
  .option('--name <name>', 'assign a name to the server', 'noname')
  .action(function(image, options) {
    var client = newApi(options);

    var data = {
      image: image,
      organization: client.config.organization,
      name: options.name
    };

    client.post('/servers', data, function (err, res) {
      if (err) {
        panic(err);
      }
      console.log(res.server.id);
    });
  });


program
  .command('events')
  .description('get real time events from the API')
  .action(notImplementedAction);


program
  .command('exec <server> <command>')
  .description('run a command in a running server')
  .action(notImplementedAction);


program
  .command('export <server>')
  .description('stream the contents of a server as a tar archive')
  .action(notImplementedAction);


program
  .command('history <image>')
  .description('show the history of an image')
  .action(notImplementedAction);


program
  .command('images')
  .description('list images')
  .option('-a, --all', 'show all images')
  .option('-f, --filter <filters>', 'provide filter values. no valid filters yet', collect, [])
  .option('--no-trunc', 'don\'t truncate output')
  .option('-q, --quiet', 'only display numeric IDs')
  .action(function(options) {
    var client = newApi(options);

    var query = '/images?';

    if (options.filter.length) {
      panic("onlinelabs: Not implemented option");
    }

    if (!options.all)   query += 'public=true&';

    client.get(query, function (err, res) {
      if (err) {
        panic(err);
      }
      if (options.quiet) {
        _.forEach(res.images, function (image) {
          console.log(image.id);
        });
      } else {
        var table = newTable({
          head: [
            'REPOSITORY', 'TAG', 'IMAGE ID', 'CREATED', 'VIRTUAL SIZE'
          ]
        });

        _.forEach(res.images, function(image) {
          var row = [
            wordify(image.name),
            '',
            image.id,
            moment(image.creation_date).fromNow(),
            filesize(image.root_volume.size, {base: 10})
          ];
          if (options.trunc) {
            truncateRow(row, [80, 25, 8, 25, 25]);
          }
          table.push(row);
        });
        console.log(table.toString());
      }
    });
  });


program
  .command('import')
  .description('create a new filesystem image from the contents of a tarball')
  .action(notImplementedAction);


program
  .command('info')
  .description('display system-wide information')
  .action(notImplementedAction);


program
  .command('inspect')
  .description('return low-level information on a server or image')
  .action(notImplementedAction);


program
  .command('kill')
  .description('kill a running server')
  .action(notImplementedAction);


program
  .command('load')
  .description('load an image from a tar archive')
  .action(notImplementedAction);


program
  .command('login')
  .description('login to the API')
  .action(notImplementedAction);


program
  .command('logout')
  .description('log out from the API')
  .action(notImplementedAction);


program
  .command('logs <server>')
  .description('fetch the logs of a server')
  .action(notImplementedAction);


program
  .command('port')
  .description('list port security for the server')
  .action(notImplementedAction);


program
  .command('pause')
  .description('pause all processes within a server')
  .action(notImplementedAction);


program
  .command('ps')
  .description('list servers')
  .option('-a, --all', 'show all servers. only running servers are shown by default')
  .option('--before <server>', 'show only server created before server, include non-running ones')
  .option('-f, --filter <filters>', 'provide filter values. valid filters: status=(starting|running|stopping|stopped)', collect, [])
  .option('-l, --latest', 'show only the latest created server, include non-running ones')
  .option('-n <n>', 'show n last created servers, include non-running ones.', parseInt)
  .option('--no-trunc', 'don\'t truncate output')
  .option('-q, --quiet', 'only display numeric IDs')
  .option('-s, --size', 'display total file sizes')
  .option('--since <server>', 'show only servers created since server, include non-running ones')
  .action(function(options) {
    var client = newApi(options);
    var query = '/servers?';

    if (options.before || options.filter.length || options.size ||
        options.since) {
      panic("onlinelabs: Not implemented option");
    }

    if (!options.all)   query += 'state=running&';
    if (options.latest) query += 'per_page=1&';
    if (options.n)      query += 'per_page=' + options.n + '&';

    client.get(query, function (err, res) {
      if (err) {
        panic(err);
      }
      if (options.quiet) {
        _.forEach(res.servers, function(server) {
          console.log(server.id);
        });
      } else {
        var table = newTable({
          head: [
            'SERVER ID', 'IMAGE', 'COMMAND', 'CREATED', 'STATUS', 'PORTS', 'NAME'
          ]
        });

        _.forEach(res.servers, function(server) {
          var row = [
            server.id,
            (server.image ? wordify(server.image.root_volume.name) : ''),
            '',
            moment(server.creation_date).fromNow(),
            server.state,
            '',
            wordify(server.name)
          ];
          if (options.trunc) {
            truncateRow(row, [8, 25, 25, 25, 25, 25, -1]);
          }
          table.push(row);
        });
        console.log(table.toString());
      }
    });
  });


program
  .command('pull <image>')
  .description('pull an image or a repository')
  .action(notImplementedAction);


program
  .command('push <image>')
  .description('push an image or a repository')
  .action(notImplementedAction);


program
  .command('rename <server>')
  .description('rename an existing server')
  .action(notImplementedAction);


program
  .command('restart <server>')
  .description('restart a running server')
  .action(notImplementedAction);


program
  .command('rm <server>')
  .description('remove one or more servers')
  .action(notImplementedAction);


program
  .command('rmi <image>')
  .description('remove one or more images')
  .action(notImplementedAction);


program
  .command('run <image>')
  .description('run a command in a new server')
  .action(notImplementedAction);


program
  .command('save <image>')
  .description('save an imate to a tar archive')
  .action(notImplementedAction);


program
  .command('search <keyword>')
  .description('search for an image on the Hub')
  .action(notImplementedAction);


program
  .command('start <server>')
  .description('start a stopped server')
  .action(notImplementedAction);


program
  .command('stop <server>')
  .description('stop a running server')
  .action(notImplementedAction);


program
  .command('tag <image> <tag>')
  .description('tag an image into a repository')
  .action(notImplementedAction);


program
  .command('top <server>')
  .description('lookup the running processes of a server')
  .action(notImplementedAction);


program
  .command('unpause <server>')
  .description('unpause a paused server')
  .action(notImplementedAction);


program
  .command('version')
  .description('show the version information')
  .action(notImplementedAction);


program
  .command('wait <server>')
  .description('block until a server stops')
  .action(notImplementedAction);


program.parse(process.argv);
if (!process.argv.slice(2).length) {
  program.outputHelp();
}
